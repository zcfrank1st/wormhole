<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
/**
 * Copyright 2010 The Apache Software Foundation
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<configuration>
    <property>
        <name>hbase.rootdir</name>
        <value>hdfs://10.1.101.46:8020/hbase</value>
        <description>The directory shared by region servers and into
            which HBase persists.  The URL should be 'fully-qualified'
            to include the filesystem scheme.  For example, to specify the
            HDFS directory '/hbase' where the HDFS instance's namenode is
            running at namenode.example.org on port 9000, set this value to:
            hdfs://namenode.example.org:9000/hbase.  By default HBase writes
            into /tmp.  Change this configuration else all data will be lost
            on machine restart.
        </description>
    </property>
    <property>
        <name>hbase.cluster.distributed</name>
        <value>true</value>
        <description>The mode the cluster will be in. Possible values are
            false for standalone mode and true for distributed mode.  If
            false, startup will run all HBase and ZooKeeper daemons together
            in the one JVM.
        </description>
    </property>
    <property>
        <name>hbase.tmp.dir</name>
        <value>/data/hbase</value>
        <description>Temporary directory on the local filesystem.
            Change this setting to point to a location more permanent
            than '/tmp' (The '/tmp' directory is often cleared on
            machine restart).
        </description>
    </property>

    <property>
        <name>hbase.regionserver.handler.count</name>
        <value>10</value>
        <description>Count of RPC Listener instances spun up on RegionServers.
            Same property is used by the Master for count of master handlers.
            Default is 10.
        </description>
    </property>
    <property>
        <name>hbase.rpc.timeout</name>
        <value>180000</value>
    </property>
    <property>
        <name>hbase.regionserver.lease.period</name>
        <value>12000</value>
        <description>HRegion server lease period in milliseconds. Default is 60 seconds. Clients must report in within this period else they are considered dead.Default		is 60000
        </description>
    </property>
    <property>
        <name>hbase.regionserver.global.memstore.upperLimit</name>
        <value>0.4</value>
        <description>Maximum size of all memstores in a region server before new
            updates are blocked and flushes are forced. Defaults to 40% of heap
        </description>
    </property>
    <property>
        <name>hbase.regionserver.global.memstore.lowerLimit</name>
        <value>0.35</value>
        <description>When memstores are being forced to flush to make room in
            memory, keep flushing until we hit this mark. Defaults to 35% of heap.
            This value equal to hbase.regionserver.global.memstore.upperLimit causes
            the minimum possible flushing to occur when updates are blocked due to
            memstore limiting.
        </description>
    </property>
    <property>
        <name>hbase.hregion.memstore.flush.size</name>
        <value>268435456</value>
        <description>
            Memstore will be flushed to disk if size of the memstore
            exceeds this number of bytes.  Value is checked by a thread that runs
            every hbase.server.thread.wakefrequency.
        </description>
    </property>
    <property>
        <name>hbase.hregion.memstore.block.multiplier</name>
        <value>2</value>
        <description>
            Block updates if memstore has hbase.hregion.block.memstore
            time hbase.hregion.flush.size bytes.  Useful preventing
            runaway memstore during spikes in update traffic.  Without an
            upper-bound, memstore fills such that when it flushes the
            resultant flush files take a long time to compact or split, or
            worse, we OOME.
        </description>
    </property>
    <property>
        <name>hbase.hregion.memstore.mslab.enabled</name>
        <value>true</value>
        <description>
            Enables the MemStore-Local Allocation Buffer,
            a feature which works to prevent heap fragmentation under
            heavy write loads. This can reduce the frequency of stop-the-world
            GC pauses on large heaps.
        </description>
    </property>
    <property>
        <name>hbase.hregion.max.filesize</name>
        <value>10737418240</value>
        <description>
            Maximum HStoreFile size. If any one of a column families' HStoreFiles has
            grown to exceed this value, the hosting HRegion is split in two.
            Default: 10G.
        </description>
    </property>
    <property>
        <name>hbase.hstore.blockingStoreFiles</name>
        <value>2147483647</value>
        <description>
            If more than this number of StoreFiles in any one Store
            (one StoreFile is written per flush of MemStore) then updates are
            blocked for this HRegion until a compaction is completed, or
            until hbase.hstore.blockingWaitTime has been exceeded.
        </description>
    </property>
    <property>
        <name>hfile.block.cache.size</name>
        <value>0.4</value>
        <description>
            Percentage of maximum heap (-Xmx setting) to allocate to block cache
            used by HFile/StoreFile. Default of 0.25 means allocate 25%.
            Set to 0 to disable but it's not recommended.
        </description>
    </property>
    <property>
        <name>hbase.hstore.compactionThreshold</name>
        <value>2147483647</value>
        <description>
            If more than this number of HStoreFiles in any one HStore
            (one HStoreFile is written per flush of memstore) then a compaction
            is run to rewrite all HStoreFiles files as one.  Larger numbers
            put off compaction but when it runs, it takes longer to complete.
        </description>
    </property>
    <property>
        <name>hbase.regionserver.thread.compaction.large</name>
        <value>5</value>
    </property>
    <property>
        <name>hbase.regionserver.thread.compaction.small</name>
        <value>5</value>
    </property>
    <property>
        <name>hbase.hstore.compaction.max</name>
        <value>10</value>
        <description>Max number of HStoreFiles to compact per 'minor' compaction.
        </description>
    </property>
    <property>
        <name>hbase.hregion.majorcompaction</name>
        <value>0</value>
        <description>The time (in miliseconds) between 'major' compactions of all HStoreFiles in a region.  Default: 1 day.
            Set to 0 to disable automated major compactions.
        </description>
    </property>

    <property>
        <name>dfs.support.append</name>
        <value>true</value>
        <description>Does HDFS allow appends to files?
            This is an hdfs config. set in here so the hdfs client will do append support.
            You must ensure that this config. is true serverside too when running hbase
            (You will have to restart your cluster after setting it).
        </description>
    </property>


    <property>
        <name>hbase.zookeeper.quorum</name>
        <value>10.2.7.107,10.2.7.108,10.2.7.158</value>
        <description>Comma separated list of servers in the ZooKeeper Quorum.
            For example, "host1.mydomain.com,host2.mydomain.com,host3.mydomain.com".
            By default this is set to localhost for local and pseudo-distributed modes
            of operation. For a fully-distributed setup, this should be set to a full
            list of ZooKeeper quorum servers. If HBASE_MANAGES_ZK is set in hbase-env.sh
            this is the list of servers which we will start/stop ZooKeeper on.
        </description>
    </property>
    <property>
        <name>hbase.zookeeper.property.dataDir</name>
        <value>/data/zookeeper</value>
        <description>Property from ZooKeeper's config zoo.cfg. The directory where the snapshot is stored.      </description>
    </property>
    <property>
        <name>zookeeper.session.timeout</name>
        <value>30000</value>
        <description>ZooKeeper session timeout.
            HBase passes this to the zk quorum as suggested maximum time for a
            session (This setting becomes zookeeper's 'maxSessionTimeout').  See
            http://hadoop.apache.org/zookeeper/docs/current/zookeeperProgrammers.html#ch_zkSessions
            "The client sends a requested timeout, the server responds with the
            timeout that it can give the client. " In milliseconds.
        </description>
    </property>


    <property>
        <name>hbase.security.authentication</name>
        <value>kerberos</value>
    </property>
    <property>
        <name>hbase.security.authorization</name>
        <value>true</value>
    </property>
    <property>
        <name>hbase.rpc.engine</name>
        <value>org.apache.hadoop.hbase.ipc.SecureRpcEngine</value>
    </property>
    <property>
        <name>hbase.coprocessor.master.classes</name>
        <value>org.apache.hadoop.hbase.security.access.AccessController</value>
    </property>
    <property>
        <name>hbase.coprocessor.region.classes</name>
        <value>org.apache.hadoop.hbase.security.token.TokenProvider,org.apache.hadoop.hbase.security.access.AccessController</value>
    </property>
    <property>
        <name>hbase.rest.keytab.file</name>
        <value>/etc/hadoop.keytab</value>
    </property>
    <property>
        <name>hbase.rest.kerberos.principal</name>
        <value>hadoop/_HOST@DIANPING.COM</value>
    </property>
    <property>
        <name>hbase.regionserver.kerberos.principal</name>
        <value>hadoop/_HOST@DIANPING.COM</value>
    </property>
    <property>
        <name>hbase.regionserver.keytab.file</name>
        <value>/etc/hadoop.keytab</value>
    </property>
    <property>
        <name>hbase.master.kerberos.principal</name>
        <value>hadoop/_HOST@DIANPING.COM</value>
    </property>
    <property>
        <name>hbase.master.keytab.file</name>
        <value>/etc/hadoop.keytab</value>
    </property>
</configuration>
